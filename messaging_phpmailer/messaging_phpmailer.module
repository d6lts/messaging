<?php
/**
 * @file
 * HTML Mail using PHPMailer. Messaging method plug-in.
 */


/**
 * Implementation of hook_messaging
 */
function messaging_phpmailer_messaging($op = 'info') {
  switch($op) {
    case 'send methods':
      $info['html_mail'] = array(
        'name' => t('HTML Mail'),
        'destination' => 'mail',
        'send' => 'messaging_phpmailer_send',
        'type' => MESSAGING_TYPE_PUSH,
        'glue' => "<br/>",
        'footer' => "<br/><br/>--",
      );
      return $info;
  }
}

/**
 * Send mail message to user account. Supports bulk sending
 * 
 * @param $destination
 *   Array of emails
 * @param $message
 *   Message array
 */
function messaging_phpmailer_send($destination, $message) {
  $mailkey = 'message-'.$message['type'];
  foreach ($destination as $to) {
    return messaging_phpmailer_drupal_mail($mailkey, $to, $message['subject'], $message['body']);
  }
}

/**
 * Send a message via PHPMailer.
 * This function mimics drupal_mail. We do not use drupal_mail instead because we want
 * to be able to send mail with both PHPMailer and MIMEMail.
 */
function messaging_phpmailer_drupal_mail($mailkey, $to, $subject, $body, $from = NULL, $headers = array()) {
  static $mail;

  //use static caching so we don't have to instantiate the PHPMailer() class every time.
  //The host is added here too, however, if at anypoint, the host fails to connect, the email may fail and never be sent.
  if (!isset($mail)) {
    include_once './'. drupal_get_path('module', 'messaging_phpmailer') .'/PHPMailer/class.phpmailer.php';
    $mail = new PHPMailer();
    $mail->IsSMTP(); // telling the class to use SMTP
    $host = ini_get('SMTP');
    if ($host) {
      $mail->Host = $host; // SMTP server
    }
    else {
      drupal_set_message('SMTP server cannot be reached!', 'error');
      return FALSE;
    }
  }

  //Set the default headers for PHPMailer. Taken from class.phpmailer.php
  $defaults = array(
    'Content-Type' => 'text/html; charset=utf-8;',
    'Encoding' => '8Bit',
    'Mailer' => 'mail'
  );

  // Theme the mail message
  list($subject, $body) = theme('messaging_phpmailer', $subject, $body, $from, $mailkey);

  // To prevent e-mail from looking like spam, the addresses in the Sender and
  // Return-Path headers should have a domain authorized to use the originating
  // SMTP server.  Errors-To is redundant, but shouldn't hurt.
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  if ($default_from) {
    $defaults['From'] = $defaults['Reply-To'] = $defaults['Sender'] = $defaults['Return-Path'] = $defaults['Errors-To'] = $default_from;
  }
  if ($from) {
    $defaults['From'] = $defaults['Reply-To'] = $from;
  }
  $headers = array_merge($defaults, $headers);
  // Custom hook traversal to allow pass by reference
  foreach (module_implements('mail_alter') AS $module) {
    $function = $module .'_mail_alter';
    $function($mailkey, $to, $subject, $body, $from, $headers);
  }


  $mail->From = $from;
  $mail->FromName = $from;
  $mail->to = array();
  $mail->AddAddress($to);
  // Uncomment the following line to get debug information printed out during mail sends
  //$mail->SMTPDebug = TRUE;

  // Strip HTML out of $body email clients that do no support HTML
  // for performance -- taking from messaging module in messaging_filter()
  $altbody = filter_xss($body, array());
  $mail->AltBody = htmlspecialchars_decode($altbody, ENT_QUOTES);

  // taken from _sanitizeHeaders() in PEAR mail() : http://pear.php.net/package/Mail
  $mail->Subject = preg_replace('=((<CR>|<LF>|0x0A/%0A|0x0D/%0D|\\n|\\r)\S).*=i', null, $subject);
  $mail->Body = str_replace("\r", '', $body);
  return $mail->Send();
}

/**
 * default theme messaging_phpmailer
 */
function theme_messaging_phpmailer($subject, $body, $from, $mailkey) {
  return array($subject, $body);
}